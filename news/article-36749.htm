<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://surfboardnode.github.io/news/article-36749.htm" />
    <!--====== Required meta tags ======-->
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>inner join 和 exists 效率_19条效率至少提高3倍的MySQL技巧</title>
        <meta name="description" content="本文我们来谈谈项目中常用的MySQL优化方法，共19条，具体如下： 1、EXPLAIN 做MySQL优化，我们要善用EXPLAIN查看SQL执行计划。 下面来个简单的示例，标注(1、2、3、4、5)我" />
        <link rel="icon" href="/assets/website/img/surfboardnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="SurfboardNode节点订阅中文站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://surfboardnode.github.io/news/article-36749.htm" />
    <meta property="og:site_name" content="SurfboardNode节点订阅中文站" />
    <meta property="og:title" content="inner join 和 exists 效率_19条效率至少提高3倍的MySQL技巧" />
    <meta property="og:image" content="https://surfboardnode.github.io/uploads/20240709-1/310cab61201208c0b3f68c60d4d9cf84.webp" />
        <meta property="og:release_date" content="2025-01-06T09:50:56" />
    <meta property="og:updated_time" content="2025-01-06T09:50:56" />
        <meta property="og:description" content="本文我们来谈谈项目中常用的MySQL优化方法，共19条，具体如下： 1、EXPLAIN 做MySQL优化，我们要善用EXPLAIN查看SQL执行计划。 下面来个简单的示例，标注(1、2、3、4、5)我" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="inner join 和 exists 效率_19条效率至少提高3倍的MySQL技巧">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!--====== Bootstrap css ======-->
    <link rel="stylesheet" href="/assets/website/css/surfboardnode/bootstrap.min.css">
    <!--====== Slick css ======-->
    <link rel="stylesheet" href="/assets/website/css/surfboardnode/slick.css">
    <!--====== Magnific Popup css ======-->
    <link rel="stylesheet" href="/assets/website/css/surfboardnode/magnific-popup.css">
    <!--====== Line Icons css ======-->
    <link rel="stylesheet" href="/assets/website/css/surfboardnode/LineIcons.css">
    <!--====== Default css ======-->
    <link rel="stylesheet" href="/assets/website/css/surfboardnode/default.css">
    <!--====== Style css ======-->
    <link rel="stylesheet" href="/assets/website/css/surfboardnode/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-4YFZCSBJW0"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-4YFZCSBJW0');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--====== HEADER ONE PART START ======-->
    <header class="header-area">
        <div class="navbar-area navbar-one navbar-transparent">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <nav class="navbar navbar-expand-lg">
                                        <a class="navbar-brand" href="/">
                        Surfboard Node
                    </a>
                                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarOne" aria-controls="navbarOne" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="toggler-icon"></span>
                        <span class="toggler-icon"></span>
                        <span class="toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse sub-menu-bar" id="navbarOne">
                        <ul class="navbar-nav m-auto">
                                                        <li class="nav-item">
                                <a href="/">首页</a>
                            </li>
                                                        <li class="nav-item">
                                <a href="/free-nodes/">免费节点</a>
                            </li>
                                                        <li class="nav-item">
                                <a href="/paid-subscribe/">推荐机场</a>
                            </li>
                                                        <li class="nav-item">
                                <a href="/news/">新闻资讯</a>
                            </li>
                                                        <li class="nav-item">
                                <a href="#">关于</a>
                            </li>
                            <li class="nav-item">
                                <a href="#">联系</a>
                            </li>
                        </ul>
                    </div>
                </nav> <!-- navbar -->
            </div>
        </div> <!-- row -->
    </div> <!-- container -->
</div>
        <div id="home" class="header-content-area d-flex align-items-center list" style="height:450px;">
            <div class="container">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="header-wrapper">
                            <div class="header-content">
                                <h1 class="header-title">inner join 和 exists 效率_19条效率至少提高3倍的MySQL技巧</h1>
                                <p class="text nav">
                                    <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                                </p>
                            </div> <!-- header content -->
                            <div class="header-image d-none d-lg-block">
                                <div class="image">
                                    <img src="/assets/website/img/surfboardnode/header.png" alt="Header">
                                </div>
                            </div>
                        </div>
                    </div>
                </div> <!-- row -->
            </div> <!-- container -->
            <div class="header-shape">
                <img src="/assets/website/img/surfboardnode/header-shape.svg" alt="shape">
            </div> <!-- header-shape -->
        </div> <!-- header content area -->
    </header>
    <!--====== HEADER ONE PART ENDS ======-->
    <!--====== ABOUT THREE PART START ======-->
    <section id="about" class="about-area pt-70 pb-100">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <div style="font-size:16px;"> <p class="ql-align-justify">本文我们来谈谈项目中常用的MySQL优化方法，共19条，具体如下：</p> <p class="ql-align-justify"><strong>1、EXPLAIN</strong></p> <p class="ql-align-justify">做MySQL优化，我们要善用EXPLAIN查看SQL执行计划。</p> <p class="ql-align-justify">下面来个简单的示例，标注(1、2、3、4、5)我们要重点关注的数据：</p> <div class="pgc-img">   <img decoding="async" src="http://img.555519.xyz/uploads/20221228/4bf2e1690409f309e867696bb9e14bc9.jpg" alt="inner join 和 exists 效率_19条效率至少提高3倍的MySQL技巧"> </div> <ul> <li class="ql-align-justify"> <strong>type列，</strong>连接类型。一个好的SQL语句至少要达到range级别。杜绝出现all级别。</li> <li class="ql-align-justify"> <strong>key列，</strong>使用到的索引名。如果没有选择索引，值是NULL。可以采取强制索引方式。</li> <li class="ql-align-justify"> <strong>key_len列，</strong>索引长度。</li> <li class="ql-align-justify"> <strong>rows列，</strong>扫描行数。该值是个预估值。</li> <li class="ql-align-justify"> <strong>extra列，</strong>详细说明。注意，常见的不太友好的值，如下：Using filesort，Using temporary。</li> </ul> <p class="ql-align-justify"><strong>2、SQL语句中IN包含的值不应过多</strong></p> <p class="ql-align-justify">MySQL对于IN做了相应的优化，即将IN中的常量全部存储在一个数组里面，而且这个数组是排好序的。但是如果数值较多，产生的消耗也是比较大的。再例如：select id from t where num in(1,2,3) 对于连续的数值，能用between就不要用in了；再或者使用连接来替换。</p> <p class="ql-align-justify"><strong>3、SELECT语句务必指明字段名称</strong></p> <p class="ql-align-justify">SELECT*增加很多不必要的消耗(CPU、IO、内存、网络带宽)；增加了使用覆盖索引的可能性；当表结构发生改变时，前断也需要更新。所以要求直接在select后面接上字段名。</p> <p class="ql-align-justify"><strong>4、当只需要一条数据的时候，使用limit 1</strong></p> <p class="ql-align-justify">这是为了使EXPLAIN中type列达到const类型</p> <p class="ql-align-justify"><strong>5、如果排序字段没有用到索引，就尽量少排序</strong></p> <p class="ql-align-justify"><strong>6、如果限制条件中其他字段没有索引，尽量少用or</strong></p> <p class="ql-align-justify">or两边的字段中，如果有一个不是索引字段，而其他条件也不是索引字段，会造成该查询不走索引的情况。很多时候使用union all或者是union(必要的时候)的方式来代替“or”会得到更好的效果。</p> <p class="ql-align-justify"><strong>7、尽量用union all代替union</strong></p> <p class="ql-align-justify">union和union all的差异主要是前者需要将结果集合并后再进行唯一性过滤操作，这就会涉及到排序，增加大量的CPU运算，加大资源消耗及延迟。当然，union all的前提条件是两个结果集没有重复数据。</p> <p class="ql-align-justify"><strong>8、不使用ORDER BY RAND()</strong></p> <p>select id from `dynamic` order by rand() limit 1000;</p> <p class="ql-align-justify">上面的SQL语句，可优化为：</p> <p>select id from `dynamic` t1 join (select rand() * (select max(id) from `dynamic`) as nid) t2 on t1.id &gt; t2.nidlimit 1000;</p> <p class="ql-align-justify"><strong>9、区分in和exists、not in和not exists</strong></p> <p>select * from 表A where id in (select id from 表B)</p> <p class="ql-align-justify">上面SQL语句相当于</p> <p>select * from 表A where exists(select * from 表B where 表B.id=表A.id)</p> <p class="ql-align-justify">区分in和exists主要是造成了驱动顺序的改变(这是性能变化的关键)，如果是exists，那么以外层表为驱动表，先被访问，如果是IN，那么先执行子查询。所以IN适合于外表大而内表小的情况；EXISTS适合于外表小而内表大的情况。</p> <p class="ql-align-justify">关于not in和not exists，推荐使用not exists，不仅仅是效率问题，not in可能存在逻辑问题。如何高效的写出一个替代not exists的SQL语句？</p> <p class="ql-align-justify">原SQL语句：</p> <p>select colname … from A表 where a.id not in (select b.id from B表)</p> <p class="ql-align-justify">高效的SQL语句：</p> <p>select colname … from A表 Left join B表 on where a.id = b.id and b.id is null</p> <p class="ql-align-justify">取出的结果集如下图表示，A表不在B表中的数据：</p> <div class="pgc-img">   <img decoding="async" src="http://img.555519.xyz/uploads/20221228/b2a515aa7ac2bdb79199fdcbe6e24312.jpg" alt="inner join 和 exists 效率_19条效率至少提高3倍的MySQL技巧"> </div> <p class="ql-align-justify"><strong>10、使用合理的分页方式以提高分页的效率</strong></p> <p>select id,name from product limit 866613, 20</p> <p class="ql-align-justify">使用上述SQL语句做分页的时候，可能有人会发现，随着表数据量的增加，直接使用limit分页查询会越来越慢。</p> <p class="ql-align-justify">优化的方法如下：可以取前一页的最大行数的id，然后根据这个最大的id来限制下一页的起点。比如此列中，上一页最大的id是866612。SQL可以采用如下的写法：</p> <p>select id,name from product where id&gt; 866612 limit 20</p> <p class="ql-align-justify"><strong>11、分段查询</strong></p> <p class="ql-align-justify">在一些用户选择页面中，可能一些用户选择的时间范围过大，造成查询缓慢。主要的原因是扫描行数过多。这个时候可以通过程序，分段进行查询，循环遍历，将结果合并处理进行展示。</p> <p class="ql-align-justify">如下图这个SQL语句，扫描的行数成百万级以上的时候就可以使用分段查询：</p> <div class="pgc-img">   <img decoding="async" src="http://img.555519.xyz/uploads/20221228/cf97a0b72a376bfb5ae8cd35d423f925.jpg" alt="inner join 和 exists 效率_19条效率至少提高3倍的MySQL技巧"> </div> <p class="ql-align-justify"><strong>12、避免在where子句中对字段进行null值判断</strong></p> <p class="ql-align-justify">对于null的判断会导致引擎放弃使用索引而进行全表扫描。</p> <p class="ql-align-justify"><strong>13、不建议使用%前缀模糊查询</strong></p> <p class="ql-align-justify">例如LIKE“%name”或者LIKE“%name%”，这种查询会导致索引失效而进行全表扫描。但是可以使用LIKE “name%”。</p> <p class="ql-align-justify">那如何查询%name%？</p> <p class="ql-align-justify">如下图所示，虽然给secret字段添加了索引，但在explain结果并没有使用：</p> <div class="pgc-img">   <img decoding="async" src="http://img.555519.xyz/uploads/20221228/2491d1dad9455d4bc4762d19b7dc15a9.jpg" alt="inner join 和 exists 效率_19条效率至少提高3倍的MySQL技巧"> </div> <p class="ql-align-justify">那么如何解决这个问题呢，答案：使用全文索引。</p> <p class="ql-align-justify">在我们查询中经常会用到select id,fnum,fdst from dynamic_201606 where user_name like '%zhangsan%'; 。这样的语句，普通索引是无法满足查询需求的。庆幸的是在MySQL中，有全文索引来帮助我们。</p> <p class="ql-align-justify">创建全文索引的SQL语法是：</p> <p>ALTER TABLE `dynamic_201606` ADD FULLTEXT INDEX `idx_user_name` (`user_name`);</p> <p class="ql-align-justify">使用全文索引的SQL语句是：</p> <p>select id,fnum,fdst from dynamic_201606 where match(user_name) against('zhangsan' in boolean mode);</p> <p class="ql-align-justify"><strong>注意：</strong>在需要创建全文索引之前，请联系DBA确定能否创建。同时需要注意的是查询语句的写法与普通索引的区别。</p> <p class="ql-align-justify"><strong>14、避免在where子句中对字段进行表达式操作</strong></p> <p class="ql-align-justify">比如：</p> <p>select user_id,user_project from user_base where age*2=36;</p> <p class="ql-align-justify">中对字段就行了算术运算，这会造成引擎放弃使用索引，建议改成：</p> <p>select user_id,user_project from user_base where age=36/2;</p> <p class="ql-align-justify"><strong>15、避免隐式类型转换</strong></p> <p class="ql-align-justify">where子句中出现column字段的类型和传入的参数类型不一致的时候发生的类型转换，建议先确定where中的参数类型。</p> <p class="ql-align-justify"><strong>16、对于联合索引来说，要遵守最左前缀法则</strong></p> <p class="ql-align-justify">举列来说索引含有字段id、name、school，可以直接用id字段，也可以id、name这样的顺序，但是name;school都无法使用这个索引。所以在创建联合索引的时候一定要注意索引字段顺序，常用的查询字段放在最前面。</p> <p class="ql-align-justify"><strong>17、必要时可以使用force index来强制查询走某个索引</strong></p> <p class="ql-align-justify">有的时候MySQL优化器采取它认为合适的索引来检索SQL语句，但是可能它所采用的索引并不是我们想要的。这时就可以采用forceindex来强制优化器使用我们制定的索引。</p> <p class="ql-align-justify"><strong>18、注意范围查询语句</strong></p> <p class="ql-align-justify">对于联合索引来说，如果存在范围查询，比如between、&gt;、</p> <p class="ql-align-justify"><strong>19、关于JOIN优化</strong></p> <div class="pgc-img">   <img decoding="async" src="http://img.555519.xyz/uploads/20221228/f17a9672514bfbd0e16fc69b5e3bee09.jpg" alt="inner join 和 exists 效率_19条效率至少提高3倍的MySQL技巧"> </div> <p class="ql-align-justify">LEFT JOIN A表为驱动表，INNER JOIN MySQL会自动找出那个数据少的表作用驱动表，RIGHT JOIN B表为驱动表。</p> <p class="ql-align-justify"><strong>注意：</strong></p> <p class="ql-align-justify"><strong>1)MySQL中没有full join，可以用以下方式来解决：</strong></p> <p>select * from A left join B on B.name = A.namewhere B.name is nullunion allselect * from B;</p> <p class="ql-align-justify"><strong>2)尽量使用inner join，避免left join：</strong></p> <p class="ql-align-justify">参与联合查询的表至少为2张表，一般都存在大小之分。如果连接方式是inner join，在没有其他过滤条件的情况下MySQL会自动选择小表作为驱动表，但是left join在驱动表的选择上遵循的是左边驱动右边的原则，即left join左边的表名为驱动表。</p> <p class="ql-align-justify"><strong>3)合理利用索引：</strong></p> <p class="ql-align-justify">被驱动表的索引字段作为on的限制字段。</p> <p class="ql-align-justify"><strong>4)利用小表去驱动大表：</strong></p> <div class="pgc-img">   <img decoding="async" src="http://img.555519.xyz/uploads/20221228/9a650af0b926f6bdb009ec01dd2f4322.jpg" alt="inner join 和 exists 效率_19条效率至少提高3倍的MySQL技巧"> </div> <p class="ql-align-justify">从原理图能够直观的看出如果能够减少驱动表的话，减少嵌套循环中的循环次数，以减少 IO总量及CPU运算的次数。</p> <p class="ql-align-justify"><strong>5)巧用STRAIGHT_JOIN：</strong></p> <p class="ql-align-justify">inner join是由MySQL选择驱动表，但是有些特殊情况需要选择另个表作为驱动表，比如有group by、order by等「Using filesort」、「Using temporary」时。STRAIGHT_JOIN来强制连接顺序，在STRAIGHT_JOIN左边的表名就是驱动表，右边则是被驱动表。在使用STRAIGHT_JOIN有个前提条件是该查询是内连接，也就是inner join。其他链接不推荐使用STRAIGHT_JOIN，否则可能造成查询结果不准确。</p> <div class="pgc-img">   <img decoding="async" src="http://img.555519.xyz/uploads/20221228/a6361ba11e0b10510185522120efb01c.jpg" alt="inner join 和 exists 效率_19条效率至少提高3倍的MySQL技巧"> </div> <p class="ql-align-justify">这个方式有时能减少3倍的时间。</p> </div></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-35989.htm">动物医院的英文单词是什么怎么写 动物医院的英文单词是什么怎么写的</a></p>
                                        <p>下一个：<a href="/news/article-36752.htm">宠物寄养协议书怎么写模板（宠物寄养协议有法律效力吗）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-42174.htm" title="nginx进程管理">nginx进程管理</a></li>
                        <li class="py-2"><a href="/news/article-40694.htm" title="宠物粮食品牌起名大全图片及名字 宠物粮食品牌起名大全图片及名字怎么起">宠物粮食品牌起名大全图片及名字 宠物粮食品牌起名大全图片及名字怎么起</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-30-node-share-links.htm" title="「1月30日」最高速度19.3M/S，V2ray/Clash/Shadowrocket/SSR/Surfboard免费节点订阅链接">「1月30日」最高速度19.3M/S，V2ray/Clash/Shadowrocket/SSR/Surfboard免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-46155.htm" title="linux信号量semaphore">linux信号量semaphore</a></li>
                        <li class="py-2"><a href="/news/article-19429.htm" title="动物疫苗一般在哪里打针的 动物疫苗在哪里购买">动物疫苗一般在哪里打针的 动物疫苗在哪里购买</a></li>
                        <li class="py-2"><a href="/news/article-49620.htm" title="动物免疫接种实验报告 动物免疫接种实验报告心得">动物免疫接种实验报告 动物免疫接种实验报告心得</a></li>
                        <li class="py-2"><a href="/news/article-36749.htm" title="inner join 和 exists 效率_19条效率至少提高3倍的MySQL技巧">inner join 和 exists 效率_19条效率至少提高3倍的MySQL技巧</a></li>
                        <li class="py-2"><a href="/news/article-34357.htm" title="仓鼠得了皮肤病会自愈吗（仓鼠得了皮肤病的症状）">仓鼠得了皮肤病会自愈吗（仓鼠得了皮肤病的症状）</a></li>
                        <li class="py-2"><a href="/news/article-26345.htm" title="宠物粮食产地在哪里（宠物粮生产基地）">宠物粮食产地在哪里（宠物粮生产基地）</a></li>
                        <li class="py-2"><a href="/news/article-47623.htm" title="宠物粮上市公司有哪些（宠物粮龙头股）">宠物粮上市公司有哪些（宠物粮龙头股）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div> <!-- container -->
    </section>
    <!--====== ABOUT THREE PART ENDS ======-->
        <!--====== FOOTER PART START ======-->
    <footer id="footer" class="footer-area">
        <div class="footer-copyright">
            <div class="container">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="copyright text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            <p class="text">SurfboardNode节点订阅中文站 版权所有 Powered by WordPress</p>
                        </div> <!-- copyright -->
                    </div>
                </div> <!-- row -->
            </div> <!-- container -->
        </div> <!-- footer copyright -->
    </footer>
    <!--====== FOOTER PART ENDS ======-->
    <!--====== BACK TOP TOP PART START ======-->
    <a href="#" class="back-to-top"><i class="lni-chevron-up"></i></a>
    <!--====== BACK TOP TOP PART ENDS ======-->
    <!--====== jquery js ======-->
    <script src="/assets/website/js/frontend/surfboardnode/vendor/modernizr-3.6.0.min.js"></script>
    <script src="/assets/website/js/frontend/surfboardnode/vendor/jquery-1.12.4.min.js"></script>
    <!--====== Bootstrap js ======-->
    <script src="/assets/website/js/frontend/surfboardnode/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/surfboardnode/popper.min.js"></script>
    <!--====== Images Loaded js ======-->
    <script src="/assets/website/js/frontend/surfboardnode/imagesloaded.pkgd.min.js"></script>
    <!--====== Scrolling Nav js ======-->
    <script src="/assets/website/js/frontend/surfboardnode/jquery.easing.min.js"></script>
    <script src="/assets/website/js/frontend/surfboardnode/scrolling-nav.js"></script>
    <!--====== Slick js ======-->
    <script src="/assets/website/js/frontend/surfboardnode/slick.min.js"></script>
    <!--====== Main js ======-->
    <script src="/assets/website/js/frontend/surfboardnode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>