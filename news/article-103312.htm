<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://surfboardnode.github.io/news/article-103312.htm" />
    <!--====== Required meta tags ======-->
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Docker基础数据卷容器的说明与共享数据原理详解</title>
        <meta name="description" content="目录  1、数据卷容器的说明 2、数据卷容器共享数据原理 3、总结 4、练习：MySQL实现数据共享   1、数据卷容器的说明 （1）什么是数据卷容器 一个容器中已经创建好的数据卷，其它容器通过这个容" />
        <link rel="icon" href="/assets/website/img/surfboardnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="SurfboardNode节点订阅中文站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://surfboardnode.github.io/news/article-103312.htm" />
    <meta property="og:site_name" content="SurfboardNode节点订阅中文站" />
    <meta property="og:title" content="Docker基础数据卷容器的说明与共享数据原理详解" />
    <meta property="og:image" content="https://surfboardnode.github.io/uploads/20240709-1/72cbe9345c1158418113b8fae7ef589c.webp" />
        <meta property="og:release_date" content="2025-04-24T09:17:54" />
    <meta property="og:updated_time" content="2025-04-24T09:17:54" />
        <meta property="og:description" content="目录  1、数据卷容器的说明 2、数据卷容器共享数据原理 3、总结 4、练习：MySQL实现数据共享   1、数据卷容器的说明 （1）什么是数据卷容器 一个容器中已经创建好的数据卷，其它容器通过这个容" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Docker基础数据卷容器的说明与共享数据原理详解">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!--====== Bootstrap css ======-->
    <link rel="stylesheet" href="/assets/website/css/surfboardnode/bootstrap.min.css">
    <!--====== Slick css ======-->
    <link rel="stylesheet" href="/assets/website/css/surfboardnode/slick.css">
    <!--====== Magnific Popup css ======-->
    <link rel="stylesheet" href="/assets/website/css/surfboardnode/magnific-popup.css">
    <!--====== Line Icons css ======-->
    <link rel="stylesheet" href="/assets/website/css/surfboardnode/LineIcons.css">
    <!--====== Default css ======-->
    <link rel="stylesheet" href="/assets/website/css/surfboardnode/default.css">
    <!--====== Style css ======-->
    <link rel="stylesheet" href="/assets/website/css/surfboardnode/style.css">
    <link rel="stylesheet" href="/assets/website/css/G.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-4YFZCSBJW0"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-4YFZCSBJW0');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--====== HEADER ONE PART START ======-->
    <header class="header-area">
        <div class="navbar-area navbar-one navbar-transparent">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <nav class="navbar navbar-expand-lg">
                    <a class="navbar-brand" href="/">
                                        <span>
                        Surfboard Node                    </span>
                                        </a>
                    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarOne" aria-controls="navbarOne" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="toggler-icon"></span>
                        <span class="toggler-icon"></span>
                        <span class="toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse sub-menu-bar" id="navbarOne">
                        <ul class="navbar-nav m-auto">
                                                        <li class="nav-item">
                                <a href="/">首页</a>
                            </li>
                                                        <li class="nav-item">
                                <a href="/free-nodes/">免费节点</a>
                            </li>
                                                        <li class="nav-item">
                                <a href="/paid-subscribe/">推荐机场</a>
                            </li>
                                                        <li class="nav-item">
                                <a href="/client.htm">客户端</a>
                            </li>
                                                        <li class="nav-item">
                                <a href="/news/">新闻资讯</a>
                            </li>
                                                    </ul>
                    </div>
                </nav> <!-- navbar -->
            </div>
        </div> <!-- row -->
    </div> <!-- container -->
</div>
        <div id="home" class="header-content-area d-flex align-items-center list" style="height:450px;">
            <div class="container">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="header-wrapper">
                            <div class="header-content">
                                <h1 class="header-title">Docker基础数据卷容器的说明与共享数据原理详解</h1>
                                <p class="text nav">
                                    <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                                </p>
                            </div> <!-- header content -->
                            <div class="header-image d-none d-lg-block">
                                <div class="image">
                                    <img src="/assets/website/img/surfboardnode/header.png" alt="Header">
                                </div>
                            </div>
                        </div>
                    </div>
                </div> <!-- row -->
            </div> <!-- container -->
            <div class="header-shape">
                <img src="/assets/website/img/surfboardnode/header-shape.svg" alt="shape">
            </div> <!-- header-shape -->
        </div> <!-- header content area -->
    </header>
    <!--====== HEADER ONE PART ENDS ======-->
    <!--====== ABOUT THREE PART START ======-->
    <section id="about" class="about-area pt-70 pb-100">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                <div class="xcblog-blog-detail">
                      				  				  				<div class="toc"> <div class="toc-container-header">目录</div> <ul> <li>1、数据卷容器的说明</li> <li>2、数据卷容器共享数据原理</li> <li>3、总结</li> <li>4、练习：MySQL实现数据共享</li> </ul> </div> <h2 id="1数据卷容器的说明">1、数据卷容器的说明</h2> <p><strong>（1）什么是数据卷容器</strong></p> <p>一个容器中已经创建好的数据卷，其它容器通过这个容器实现数据共享。那么这个容器，称之为数据卷容器。（也可以说叫父容器）</p> <p><strong>（2）数据卷容器的作用</strong></p> <p>数据卷容器的作用就是，实现多个容器间的数据传递共享。</p> <p>如果你有一些持续更新的数据需要在容器之间共享，最好创建数据卷容器。</p> <p>数据卷容器，其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载的。</p> <p><strong>（3）需要使用的Docker参数</strong></p> <p><code>--volumes-from</code>：容器间传递共享。</p> <p><strong>（4）补充：容器数据卷和数据卷容器的区别</strong></p> <p><strong>Docker容器数据卷：</strong></p> <ul> <li>文件是数据持久化的最常见的保存方式。<br /> 由于文件系统的隔离，以及本身是以沙盒形式运行等性质，使其对保存需要持久化的数据并不稳定。<br /> 对此，Docker使用了数据卷这种专门定制的形式。</li> <li>数据卷就是一个挂载在容器内文件或目录。<br /> 在容器中，数据卷是从外界挂载到内部容器中的，所以可以脱离容器的生命周期而独立存在。<br /> 正式由于数据卷的生命周期并不等同于容器的生命周期，在容器退或者是删除之后，数据卷仍然不会受到影响，会依然存在于Docker中。</li> </ul> <p><strong>数据卷的特点：</strong></p> <p>数据卷中的数据并不能继承于镜像，也不在联合文件系统临时层所管理的范围内，所以镜像层面的写时复制不会作用于数据卷中的数据，而这些数据也不会被<code>docker commit</code>提交到新的镜像中。</p> <ul> <li>1）文件的操作不是在沙盒环境中进行的，而是直接作用于宿主机内真实的硬盘I/O中；</li> <li>2）外界直接挂在到容器中，脱离了容器的生命的周期；</li> <li>3）生命周期不受容器控制，能够安全有效的存储文件到数据卷中；</li> <li>4）数据卷独立于容器之外，可实现多个容器共享一个数据卷。</li> </ul> <p><strong>Docker数据卷容器：</strong></p> <p>将一个运行的容器作为数据卷，其他容器可以通过挂载这个容器（也叫父容器）实现数据共享。</p> <p>优势：</p> <ul> <li>1）轻松的将数据卷进行归类和汇总；</li> <li>2）能够更好的管理容器与数据卷之间的关系；</li> <li>3）更加合理的控制数据卷的生命周期。</li> </ul> <h2 id="2数据卷容器共享数据原理">2、数据卷容器共享数据原理</h2> <p>我们以上一篇文章中创建的<code>wukong/centos</code>镜像为例，进行演示。</p> <p>将会以<code>wukong/centos</code>镜像启动三个容器：<code>docker01-fu</code>、<code>docker02-zi</code>、<code>docker03-zi</code>。</p> <p><strong>操作1：</strong></p> <p>创建<code>docker01-fu</code>容器，并操作。</p> <pre><code class="language-shell"># 1.查看本地docker镜像 [root@192 ~]# docker images REPOSITORY      TAG       IMAGE ID       CREATED        SIZE wukong/centos   1.0       98b1b6590b78   2 hours ago    209MB centos          latest    300e315adb2f   3 months ago   209MB  # 2.运行wukong/centos镜像，创建docker01-fu容器 [root@192 ~]# docker run -it --name docker01-fu wukong/centos:1.0  # 3.查看该容器器内容 [root@d2ad442398d5 /]# ls -l total 0 lrwxrwxrwx.   1 root root   7 Nov  3 15:22 bin -&gt; usr/bin drwxr-xr-x.   5 root root 360 Mar 19 14:37 dev drwxr-xr-x.   1 root root  66 Mar 19 14:37 etc drwxr-xr-x.   2 root root   6 Nov  3 15:22 home lrwxrwxrwx.   1 root root   7 Nov  3 15:22 lib -&gt; usr/lib lrwxrwxrwx.   1 root root   9 Nov  3 15:22 lib64 -&gt; usr/lib64 drwx------.   2 root root   6 Dec  4 17:37 lost+found drwxr-xr-x.   2 root root   6 Nov  3 15:22 media drwxr-xr-x.   2 root root   6 Nov  3 15:22 mnt drwxr-xr-x.   2 root root   6 Nov  3 15:22 opt dr-xr-xr-x. 123 root root   0 Mar 19 14:37 proc dr-xr-x---.   2 root root 162 Dec  4 17:37 root drwxr-xr-x.  11 root root 163 Dec  4 17:37 run lrwxrwxrwx.   1 root root   8 Nov  3 15:22 sbin -&gt; usr/sbin drwxr-xr-x.   2 root root   6 Nov  3 15:22 srv dr-xr-xr-x.  13 root root   0 Mar 19 04:07 sys drwxrwxrwt.   7 root root 145 Dec  4 17:37 tmp drwxr-xr-x.  12 root root 144 Dec  4 17:37 usr drwxr-xr-x.  20 root root 262 Dec  4 17:37 var drwxr-xr-x.   2 root root   6 Mar 19 14:37 volume01  # 数据卷目录 drwxr-xr-x.   2 root root   6 Mar 19 14:37 volume02  # 数据卷目录</code></pre> <p>我们可以看到<code>wukong/centos</code>容器创建后，会挂载好<code>volume01</code>和<code>volume02</code>两个目录。</p> <p>然后我们在<code>volume02</code>目录中创建一个<code>docker01-fu_add.txt</code>文件。</p> <pre><code class="language-shell"># 创建文件 [root@d2ad442398d5 /]# mkdir /volume02/docker01-fu_add.txt  # 查看文件中的内容 [root@d2ad442398d5 /]# ls -l /volume02 total 0 drwxr-xr-x. 2 root root 6 Mar 19 14:48 docker01-fu_add.txt</code></pre> <p>之后<code>ctrl + P + Q</code>退出容器。</p> <p><strong>操作2：</strong></p> <p>创建<code>docker02-zi</code>容器，并操作。</p> <p>执行如下命令：</p> <pre><code class="language-shell">docker run -it --name docker02-zi \ --volumes-from docker01-fu \ wukong/centos:1.0</code></pre> <p>演示：</p> <pre><code class="language-shell"># 1.创建docker02-zi容器 [root@192 ~]# docker run -it --name docker02-zi \ &gt; --volumes-from docker01-fu \ &gt; wukong/centos:1.0 [root@0ce44b3e129e /]#  # 2.查看docker02-zi容器 [root@0ce44b3e129e /]# ls -l total 0 lrwxrwxrwx.   1 root root   7 Nov  3 15:22 bin -&gt; usr/bin drwxr-xr-x.   5 root root 360 Mar 19 14:56 dev drwxr-xr-x.   1 root root  66 Mar 19 14:56 etc drwxr-xr-x.   2 root root   6 Nov  3 15:22 home lrwxrwxrwx.   1 root root   7 Nov  3 15:22 lib -&gt; usr/lib lrwxrwxrwx.   1 root root   9 Nov  3 15:22 lib64 -&gt; usr/lib64 drwx------.   2 root root   6 Dec  4 17:37 lost+found drwxr-xr-x.   2 root root   6 Nov  3 15:22 media drwxr-xr-x.   2 root root   6 Nov  3 15:22 mnt drwxr-xr-x.   2 root root   6 Nov  3 15:22 opt dr-xr-xr-x. 127 root root   0 Mar 19 14:56 proc dr-xr-x---.   2 root root 162 Dec  4 17:37 root drwxr-xr-x.  11 root root 163 Dec  4 17:37 run lrwxrwxrwx.   1 root root   8 Nov  3 15:22 sbin -&gt; usr/sbin drwxr-xr-x.   2 root root   6 Nov  3 15:22 srv dr-xr-xr-x.  13 root root   0 Mar 19 04:07 sys drwxrwxrwt.   7 root root 145 Dec  4 17:37 tmp drwxr-xr-x.  12 root root 144 Dec  4 17:37 usr drwxr-xr-x.  20 root root 262 Dec  4 17:37 var drwxr-xr-x.   2 root root   6 Mar 19 14:37 volume01 drwxr-xr-x.   3 root root  33 Mar 19 14:48 volume02 # 我们可以看到docker02-zi容器中，也有volume01和volume02目录 # 因为他们是同一个镜像创建的容器。  # 我们查看volume02目录中的内容 [root@0ce44b3e129e /]# ls -l /volume02/ total 0 drwxr-xr-x. 2 root root 6 Mar 19 14:48 docker01-fu_add.txt [root@0ce44b3e129e /]#</code></pre> <p>从上面看出，我们在新创建的<code>docker02-zi</code>容器中的，<code>/volume02/</code>数据卷目录中发现，有<code>docker01-fu</code>容器中创建的<code>docker01-fu_add.txt</code>文件。</p> <p><strong>结论：<code>docker01-fu</code>容器中创建的内容，同步到了<code>docker02-zi</code>容器上面。</strong></p> <blockquote> <p><strong>说明：</strong></p> <p><code>docker01-fu</code>容器就可以叫做父容器，也称之为数据卷容器。</p> <p>即：通过<code>--volumes-from</code>我们就可以是容器间的数据共享了。</p> </blockquote> <p>在<code>docker02-zi</code>容器的<code>/volume02/</code>目录中创建<code>docker02-zi_add.txt</code>文件。</p> <pre><code class="language-shell"># 创建文件 [root@0ce44b3e129e /]# mkdir /volume02/docker02-zi_add.txt  # 查看文件中的内容 [root@0ce44b3e129e /]# ls -l /volume02 total 0 drwxr-xr-x. 2 root root 6 Mar 19 14:48 docker01-fu_add.txt drwxr-xr-x. 2 root root 6 Mar 19 15:01 docker02-zi_add.txt</code></pre> <p>之后<code>ctrl + P + Q</code>退出容器。</p> <p><strong>操作3：</strong></p> <p>创建<code>docker03-zi</code>容器，并操作。</p> <p>执行如下命令：</p> <pre><code class="language-shell">docker run -it --name docker03-zi \ --volumes-from docker01-fu \ wukong/centos:1.0</code></pre> <p>演示：</p> <pre><code class="language-shell"># 1.创建docker03-zi容器 [root@192 ~]# docker run -it --name docker03-zi \ &gt; --volumes-from docker01-fu \ &gt; wukong/centos:1.0 [root@14e91c379eb0 /]#   # 2.我们查看volume02目录中的内容 [root@14e91c379eb0 /]# ls -l /volume02 total 0 drwxr-xr-x. 2 root root 6 Mar 19 14:48 docker01-fu_add.txt drwxr-xr-x. 2 root root 6 Mar 19 15:01 docker02-zi_add.txt</code></pre> <p><strong>结论：我们可以看到新创建的<code>docker03-zi</code>容器，同步了<code>docker01-fu</code>容器和<code>docker02-zi</code>容器中创建的文件。</strong></p> <p>我们在<code>docker03-zi</code>容器中创建<code>docker03-zi_add.txt</code>文件。</p> <pre><code class="language-shell"># 创建文件 [root@14e91c379eb0 /]# mkdir /volume02/docker03-zi_add.txt  # 查看文件中的内容 [root@14e91c379eb0 /]# ls -l /volume02 total 0 drwxr-xr-x. 2 root root 6 Mar 19 14:48 docker01-fu_add.txt drwxr-xr-x. 2 root root 6 Mar 19 15:01 docker02-zi_add.txt drwxr-xr-x. 2 root root 6 Mar 19 15:15 docker03-zi_add.txt</code></pre> <p>之后<code>ctrl + P + Q</code>退出容器。</p> <p><strong>操作4：</strong></p> <p>我们再到<code>docker01-fu</code>容器和<code>docker02-zi</code>容器中，看看是否能够同步到<code>docker03-zi</code>容器中创建的<code>docker03-zi_add.txt</code>文件。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/54a349ca03592e6a0795a9efd01a8799.jpg" alt="Docker基础数据卷容器的说明与共享数据原理详解"></p> <p>演示：</p> <pre><code class="language-shell"># 进入docker01-fu容器 [root@192 ~]# docker attach docker01-fu  # 查看/volume02目录中的内容 [root@d2ad442398d5 /]# ls -l /volume02 total 0 drwxr-xr-x. 2 root root 6 Mar 19 14:48 docker01-fu_add.txt drwxr-xr-x. 2 root root 6 Mar 19 15:01 docker02-zi_add.txt drwxr-xr-x. 2 root root 6 Mar 19 15:15 docker03-zi_add.txt # `ctrl + P + Q`退出容器  # 进入docker01-fu容器 [root@192 ~]# docker attach docker02-zi  # 查看/volume02目录中的内容 [root@0ce44b3e129e /]# ls -l /volume02 total 0 drwxr-xr-x. 2 root root 6 Mar 19 14:48 docker01-fu_add.txt drwxr-xr-x. 2 root root 6 Mar 19 15:01 docker02-zi_add.txt drwxr-xr-x. 2 root root 6 Mar 19 15:15 docker03-zi_add.txt</code></pre> <p><strong>结论：我们从<code>docker01-fu</code>容器和<code>docker02-zi</code>容器中都可以看到，<code>docker03-zi</code>容器中创建的<code>docker03-zi_add.txt</code>文件。</strong></p> <p><strong>说明：这三个容器可以之间可以互相同步数据。</strong></p> <p><strong>操作5：</strong></p> <p>我们现在把<code>docker01-fu</code>容器或直接删除停掉，看看<code>docker02-zi</code>容器和<code>docker03-zi</code>容器之间是否还能够同步数据。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/10af7a212291c06c71fca74a1dee1915.jpg" alt="Docker基础数据卷容器的说明与共享数据原理详解"></p> <p>演示：</p> <pre><code class="language-shell"># 1.删除docker01-fu容器 [root@192 ~]# docker rm -f docker01-fu docker01-fu</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/28fe1fc1753bbd9e769dd00dfb027f59.jpg" alt="Docker基础数据卷容器的说明与共享数据原理详解"></p> <pre><code class="language-shell"># 2.进入docker02-zi容器 [root@192 ~]# docker attach docker02-zi  # 3.查看/volume02目录中内容，可以看到之前共享的数据还在。 [root@0ce44b3e129e /]# ls -l /volume02 total 0 drwxr-xr-x. 2 root root 6 Mar 19 14:48 docker01-fu_add.txt drwxr-xr-x. 2 root root 6 Mar 19 15:01 docker02-zi_add.txt drwxr-xr-x. 2 root root 6 Mar 19 15:15 docker03-zi_add.txt  # 4.在/volume02目录中内容创建docker02-zi_update.txt文件 [root@0ce44b3e129e /]# mkdir /volume02/docker02-zi_update.txt [root@0ce44b3e129e /]# ls -l /volume02 total 0 drwxr-xr-x. 2 root root 6 Mar 19 14:48 docker01-fu_add.txt drwxr-xr-x. 2 root root 6 Mar 19 15:01 docker02-zi_add.txt drwxr-xr-x. 2 root root 6 Mar 19 15:56 docker02-zi_update.txt drwxr-xr-x. 2 root root 6 Mar 19 15:15 docker03-zi_add.txt [root@0ce44b3e129e /]#</code></pre> <p><code>ctrl + P + Q</code>退出容器。</p> <pre><code class="language-shell"># 5.进入docker03-zi容器 [root@192 ~]# docker attach docker03-zi  # 6.查看/volume02目录中的内容 [root@14e91c379eb0 /]# ls -l /volume02 total 0 drwxr-xr-x. 2 root root 6 Mar 19 14:48 docker01-fu_add.txt drwxr-xr-x. 2 root root 6 Mar 19 15:01 docker02-zi_add.txt drwxr-xr-x. 2 root root 6 Mar 19 15:56 docker02-zi_update.txt drwxr-xr-x. 2 root root 6 Mar 19 15:15 docker03-zi_add.txt [root@14e91c379eb0 /]#</code></pre> <p><strong>结论：我们可以看到，删除了<code>docker01-fu</code>容器，原先三个容器同步的数据依然存在，并且<code>docker02-zi</code>容器和<code>docker03-zi</code>容器之间依然可以互相同步新增的数据。</strong></p> <p><strong>操作6：</strong></p> <p>我们还可以继续做如下操作，但是我们就进行叙述了，不进行代码演示了。</p> <p>步骤（1）：如果在通过<code>wukong/centos</code>镜像，启动一个<code>docker04-zi</code>容器，<code>--volumes-from</code>于<code>docker03-zi</code>容器。</p> <p><strong>结论：<code>docker04-zi</code>容器会和<code>docker02-zi</code>容器、<code>docker03-zi</code>容器，这三个容器之间互相同步数据。</strong></p> <p>步骤（2）：如果按照操作（1）之后，把<code>docker03-zi</code>容器删除掉。</p> <p><strong>结论：<code>docker04-zi</code>容器会和<code>docker02-zi</code>容器之间依然互相同步，且所有的数据都会存在。</strong></p> <h2 id="3总结">3、总结</h2> <p>数据卷容器的生命周期为一直持续到没有容器使用它为止。</p> <p>这相当于一种备份机制，可以利用数据卷容器来备份、恢复、迁移数据。</p> <h2 id="4练习mysql实现数据共享">4、练习：MySQL实现数据共享</h2> <p>目标：多个MySQL实现数据共享。</p> <p>以MySQL 5.7镜像为例。</p> <p><strong>步骤1：启动mysql-01镜像。</strong></p> <pre><code class="language-shell">docker run -p 3310:3306 \ --name mysql-01 \ -v /etc/mysql/conf.d \ -v /var/lib/mysql \ -e MYSQL_ROOT_PASSWORD=123456 \ -d mysql:5.7</code></pre> <p>以匿名挂载的方式实现数据卷挂载。</p> <p><strong>步骤2：启动mysql-02镜像。</strong></p> <pre><code class="language-shell">docker run -p 3310:3306 \ --name mysql-02 --volumes-from mysql-01 \ -e MYSQL_ROOT_PASSWORD=123456 \ -d mysql:5.7</code></pre> <p>这个时候，就可以实现两个MySQL容器之间数据同步了。</p> <blockquote> <p>参考：https://www.cnblogs.com/bixiaoyu/p/9069778.html</p> </blockquote> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-102487.htm">pandas中的apply()使用</a></p>
                                        <p>下一个：<a href="/news/article-103316.htm">聊城宠物店地址电话（聊城宠物店在哪里）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-67952.htm" title="is not eligible for getting processed by all BeanPostProcessors 导致找不到路径报404">is not eligible for getting processed by all BeanPostProcessors 导致找不到路径报404</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-31-clash-node.htm" title="「3月31日」最高速度20.6M/S，Shadowrocket/Clash/V2ray/SSR/Surfboard免费节点订阅链接">「3月31日」最高速度20.6M/S，Shadowrocket/Clash/V2ray/SSR/Surfboard免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-13-free-surfboard.htm" title="「4月13日」最高速度20.5M/S，V2ray/Shadowrocket/Clash/SSR/Surfboard免费节点订阅链接">「4月13日」最高速度20.5M/S，V2ray/Shadowrocket/Clash/SSR/Surfboard免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-95109.htm" title="PHP魔术方法">PHP魔术方法</a></li>
                        <li class="py-2"><a href="/news/article-98123.htm" title="宠物粮食市场报告分析（宠物粮食市场前景）">宠物粮食市场报告分析（宠物粮食市场前景）</a></li>
                        <li class="py-2"><a href="/news/article-98846.htm" title="动物疫苗接种注意事项有哪些内容（动物疫苗注射工作注意事项）">动物疫苗接种注意事项有哪些内容（动物疫苗注射工作注意事项）</a></li>
                        <li class="py-2"><a href="/news/article-95111.htm" title="动物疫苗的上市公司有几家（动物疫苗上市公司排名）">动物疫苗的上市公司有几家（动物疫苗上市公司排名）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-9-node-share.htm" title="「4月9日」最高速度22.7M/S，V2ray/Shadowrocket/Clash/SSR/Surfboard免费节点订阅链接">「4月9日」最高速度22.7M/S，V2ray/Shadowrocket/Clash/SSR/Surfboard免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-76558.htm" title="一只宠物猫大概多少钱?（一只宠物猫多少元）">一只宠物猫大概多少钱?（一只宠物猫多少元）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-27-node-share-links.htm" title="「3月27日」最高速度18.3M/S，Clash/V2ray/Shadowrocket/SSR/Surfboard免费节点订阅链接">「3月27日」最高速度18.3M/S，Clash/V2ray/Shadowrocket/SSR/Surfboard免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">72</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">89</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div> <!-- container -->
    </section>
    <!--====== ABOUT THREE PART ENDS ======-->
        <!--====== FOOTER PART START ======-->
    <footer id="footer" class="footer-area">
        <div class="footer-copyright">
            <div class="container">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="copyright text-center">
                                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <p class="text">SurfboardNode节点订阅中文站 版权所有 Powered by WordPress</p>
                        </div> <!-- copyright -->
                    </div>
                </div> <!-- row -->
            </div> <!-- container -->
        </div> <!-- footer copyright -->
    </footer>
    <!--====== FOOTER PART ENDS ======-->
    <!--====== BACK TOP TOP PART START ======-->
    <a href="#" class="back-to-top"><i class="lni-chevron-up"></i></a>
    <!--====== BACK TOP TOP PART ENDS ======-->
    <!--====== jquery js ======-->
    <script src="/assets/website/js/frontend/surfboardnode/vendor/modernizr-3.6.0.min.js"></script>
    <script src="/assets/website/js/frontend/surfboardnode/vendor/jquery-1.12.4.min.js"></script>
    <!--====== Bootstrap js ======-->
    <script src="/assets/website/js/frontend/surfboardnode/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/surfboardnode/popper.min.js"></script>
    <!--====== Images Loaded js ======-->
    <script src="/assets/website/js/frontend/surfboardnode/imagesloaded.pkgd.min.js"></script>
    <!--====== Scrolling Nav js ======-->
    <script src="/assets/website/js/frontend/surfboardnode/jquery.easing.min.js"></script>
    <script src="/assets/website/js/frontend/surfboardnode/scrolling-nav.js"></script>
    <!--====== Slick js ======-->
    <script src="/assets/website/js/frontend/surfboardnode/slick.min.js"></script>
    <!--====== Main js ======-->
    <script src="/assets/website/js/frontend/surfboardnode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>